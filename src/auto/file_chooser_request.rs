// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::GString;
use glib::StaticType;
use glib::Value;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_sys;
use gobject_sys;
use gtk;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use webkit2_sys;

glib_wrapper! {
    pub struct FileChooserRequest(Object<webkit2_sys::WebKitFileChooserRequest, webkit2_sys::WebKitFileChooserRequestClass, FileChooserRequestClass>);

    match fn {
        get_type => || webkit2_sys::webkit_file_chooser_request_get_type(),
    }
}

pub const NONE_FILE_CHOOSER_REQUEST: Option<&FileChooserRequest> = None;

pub trait FileChooserRequestExt: 'static {
    fn cancel(&self);

    fn get_mime_types(&self) -> Vec<GString>;

    fn get_mime_types_filter(&self) -> Option<gtk::FileFilter>;

    fn get_select_multiple(&self) -> bool;

    fn get_selected_files(&self) -> Vec<GString>;

    fn select_files(&self, files: &[&str]);

    fn get_property_filter(&self) -> Option<gtk::FileFilter>;

    fn connect_property_filter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_mime_types_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_select_multiple_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_selected_files_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FileChooserRequest>> FileChooserRequestExt for O {
    fn cancel(&self) {
        unsafe {
            webkit2_sys::webkit_file_chooser_request_cancel(self.as_ref().to_glib_none().0);
        }
    }

    fn get_mime_types(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(webkit2_sys::webkit_file_chooser_request_get_mime_types(self.as_ref().to_glib_none().0))
        }
    }

    fn get_mime_types_filter(&self) -> Option<gtk::FileFilter> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_file_chooser_request_get_mime_types_filter(self.as_ref().to_glib_none().0))
        }
    }

    fn get_select_multiple(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_file_chooser_request_get_select_multiple(self.as_ref().to_glib_none().0))
        }
    }

    fn get_selected_files(&self) -> Vec<GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(webkit2_sys::webkit_file_chooser_request_get_selected_files(self.as_ref().to_glib_none().0))
        }
    }

    fn select_files(&self, files: &[&str]) {
        unsafe {
            webkit2_sys::webkit_file_chooser_request_select_files(self.as_ref().to_glib_none().0, files.to_glib_none().0);
        }
    }

    fn get_property_filter(&self) -> Option<gtk::FileFilter> {
        unsafe {
            let mut value = Value::from_type(<gtk::FileFilter as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"filter\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().ok().flatten()
        }
    }

    fn connect_property_filter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::filter\0".as_ptr() as *const _,
                Some(transmute(notify_filter_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_mime_types_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::mime-types\0".as_ptr() as *const _,
                Some(transmute(notify_mime_types_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_select_multiple_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::select-multiple\0".as_ptr() as *const _,
                Some(transmute(notify_select_multiple_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }

    fn connect_property_selected_files_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::selected-files\0".as_ptr() as *const _,
                Some(transmute(notify_selected_files_trampoline::<Self, F> as usize)), Box_::into_raw(f))
        }
    }
}

unsafe extern "C" fn notify_filter_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitFileChooserRequest, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<FileChooserRequest> {
    let f: &F = &*(f as *const F);
    f(&FileChooserRequest::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_mime_types_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitFileChooserRequest, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<FileChooserRequest> {
    let f: &F = &*(f as *const F);
    f(&FileChooserRequest::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_select_multiple_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitFileChooserRequest, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<FileChooserRequest> {
    let f: &F = &*(f as *const F);
    f(&FileChooserRequest::from_glib_borrow(this).unsafe_cast())
}

unsafe extern "C" fn notify_selected_files_trampoline<P, F: Fn(&P) + 'static>(this: *mut webkit2_sys::WebKitFileChooserRequest, _param_spec: glib_sys::gpointer, f: glib_sys::gpointer)
where P: IsA<FileChooserRequest> {
    let f: &F = &*(f as *const F);
    f(&FileChooserRequest::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for FileChooserRequest {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FileChooserRequest")
    }
}
