// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

#[cfg(any(feature = "v2_16", feature = "dox"))]
use CookieManager;
#[cfg(any(feature = "v2_10", feature = "dox"))]
use glib::GString;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use glib::StaticType;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
#[cfg(any(feature = "v2_16", feature = "dox"))]
use gobject_sys;
use std::fmt;
use webkit2_sys;

glib_wrapper! {
    pub struct WebsiteDataManager(Object<webkit2_sys::WebKitWebsiteDataManager, webkit2_sys::WebKitWebsiteDataManagerClass, WebsiteDataManagerClass>);

    match fn {
        get_type => || webkit2_sys::webkit_website_data_manager_get_type(),
    }
}

impl WebsiteDataManager {
    //#[cfg(any(feature = "v2_10", feature = "dox"))]
    //pub fn new(first_option_name: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> WebsiteDataManager {
    //    unsafe { TODO: call webkit2_sys:webkit_website_data_manager_new() }
    //}

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    pub fn new_ephemeral() -> WebsiteDataManager {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(webkit2_sys::webkit_website_data_manager_new_ephemeral())
        }
    }
}

pub const NONE_WEBSITE_DATA_MANAGER: Option<&WebsiteDataManager> = None;

pub trait WebsiteDataManagerExt: 'static {
    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn clear<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), Error>) + Send + 'static>(&self, types: WebsiteDataTypes, timespan: /*Ignored*/glib::TimeSpan, cancellable: Option<&P>, callback: Q);

    //#[cfg(feature = "futures")]
    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn clear_future(&self, types: WebsiteDataTypes, timespan: /*Ignored*/glib::TimeSpan) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>> where Self: Sized + Clone;

    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn fetch<P: IsA<gio::Cancellable>, Q: FnOnce(Result</*Ignored*/Vec<WebsiteData>, Error>) + Send + 'static>(&self, types: WebsiteDataTypes, cancellable: Option<&P>, callback: Q);

    //#[cfg(feature = "futures")]
    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn fetch_future(&self, types: WebsiteDataTypes) -> Box_<futures_core::Future<Item = (Self, /*Ignored*/Vec<WebsiteData>), Error = (Self, Error)>> where Self: Sized + Clone;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_base_cache_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_base_data_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_cookie_manager(&self) -> Option<CookieManager>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_disk_cache_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_indexeddb_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_local_storage_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_offline_application_cache_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_websql_directory(&self) -> Option<GString>;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn is_ephemeral(&self) -> bool;

    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn remove<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), Error>) + Send + 'static>(&self, types: WebsiteDataTypes, cancellable: Option<&P>, callback: Q);

    //#[cfg(feature = "futures")]
    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn remove_future(&self, types: WebsiteDataTypes) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>> where Self: Sized + Clone;

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_property_is_ephemeral(&self) -> bool;
}

impl<O: IsA<WebsiteDataManager>> WebsiteDataManagerExt for O {
    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn clear<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), Error>) + Send + 'static>(&self, types: WebsiteDataTypes, timespan: /*Ignored*/glib::TimeSpan, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call webkit2_sys:webkit_website_data_manager_clear() }
    //}

    //#[cfg(feature = "futures")]
    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn clear_future(&self, types: WebsiteDataTypes, timespan: /*Ignored*/glib::TimeSpan) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>> where Self: Sized + Clone {
        //use gio::GioFuture;
        //use fragile::Fragile;

        //GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    let send = Fragile::new(send);
        //    let obj_clone = Fragile::new(obj.clone());
        //    obj.clear(
        //        types,
        //        timespan,
        //        Some(&cancellable),
        //        move |res| {
        //            let obj = obj_clone.into_inner();
        //            let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
        //            let _ = send.into_inner().send(res);
        //        },
        //    );

        //    cancellable
        //})
    //}

    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn fetch<P: IsA<gio::Cancellable>, Q: FnOnce(Result</*Ignored*/Vec<WebsiteData>, Error>) + Send + 'static>(&self, types: WebsiteDataTypes, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call webkit2_sys:webkit_website_data_manager_fetch() }
    //}

    //#[cfg(feature = "futures")]
    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn fetch_future(&self, types: WebsiteDataTypes) -> Box_<futures_core::Future<Item = (Self, /*Ignored*/Vec<WebsiteData>), Error = (Self, Error)>> where Self: Sized + Clone {
        //use gio::GioFuture;
        //use fragile::Fragile;

        //GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    let send = Fragile::new(send);
        //    let obj_clone = Fragile::new(obj.clone());
        //    obj.fetch(
        //        types,
        //        Some(&cancellable),
        //        move |res| {
        //            let obj = obj_clone.into_inner();
        //            let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
        //            let _ = send.into_inner().send(res);
        //        },
        //    );

        //    cancellable
        //})
    //}

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_base_cache_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_website_data_manager_get_base_cache_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_base_data_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_website_data_manager_get_base_data_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_cookie_manager(&self) -> Option<CookieManager> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_website_data_manager_get_cookie_manager(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_disk_cache_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_website_data_manager_get_disk_cache_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_indexeddb_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_website_data_manager_get_indexeddb_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_local_storage_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_website_data_manager_get_local_storage_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_offline_application_cache_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_website_data_manager_get_offline_application_cache_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_10", feature = "dox"))]
    fn get_websql_directory(&self) -> Option<GString> {
        unsafe {
            from_glib_none(webkit2_sys::webkit_website_data_manager_get_websql_directory(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn is_ephemeral(&self) -> bool {
        unsafe {
            from_glib(webkit2_sys::webkit_website_data_manager_is_ephemeral(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn remove<P: IsA<gio::Cancellable>, Q: FnOnce(Result<(), Error>) + Send + 'static>(&self, types: WebsiteDataTypes, cancellable: Option<&P>, callback: Q) {
    //    unsafe { TODO: call webkit2_sys:webkit_website_data_manager_remove() }
    //}

    //#[cfg(feature = "futures")]
    //#[cfg(any(feature = "v2_16", feature = "dox"))]
    //fn remove_future(&self, types: WebsiteDataTypes) -> Box_<futures_core::Future<Item = (Self, ()), Error = (Self, Error)>> where Self: Sized + Clone {
        //use gio::GioFuture;
        //use fragile::Fragile;

        //GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    let send = Fragile::new(send);
        //    let obj_clone = Fragile::new(obj.clone());
        //    obj.remove(
        //        types,
        //        Some(&cancellable),
        //        move |res| {
        //            let obj = obj_clone.into_inner();
        //            let res = res.map(|v| (obj.clone(), v)).map_err(|v| (obj.clone(), v));
        //            let _ = send.into_inner().send(res);
        //        },
        //    );

        //    cancellable
        //})
    //}

    #[cfg(any(feature = "v2_16", feature = "dox"))]
    fn get_property_is_ephemeral(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_sys::g_object_get_property(self.to_glib_none().0 as *mut gobject_sys::GObject, b"is-ephemeral\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().unwrap().unwrap()
        }
    }
}

impl fmt::Display for WebsiteDataManager {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "WebsiteDataManager")
    }
}
